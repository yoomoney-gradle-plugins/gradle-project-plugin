import org.gradle.api.internal.artifacts.dependencies.ProjectDependencyInternal

buildscript {
    repositories {
        maven { url 'https://nexus.yamoney.ru/repository/central/' }
        maven { url 'https://nexus.yamoney.ru/repository/dl.bintray.com/yoomoney-tech/maven/' }
        dependencies {
            classpath 'org.eclipse.jgit:org.eclipse.jgit:5.5.1.201910021850-r'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'yamoney-java-artifact-publish-plugin'
apply plugin: 'ru.yoomoney.gradle.plugins.artifact-release-plugin'

buildDir = file("target")

configureRelease()
configureByBranch()
configurePublish()
configureJar()

//создаем таски, которые вызываются в общем скрипте сборки, но для данного проекта неважны
task checkCoverage()
task componentTest(type: Test)

void configureRelease() {
    releaseSettings {
        releaseTasks = ["build", "publish"]
        pathToGitPrivateSshKey = System.getenv("GIT_PRIVATE_SSH_KEY_PATH")
        gitUsername = "SvcReleaserBackend"
        gitEmail = "SvcReleaserBackend@yoomoney.ru"
        changelogRequired = true
        addPullRequestLinkToChangelog = true
        bitbucketUser = System.getenv("BITBUCKET_USER")
        bitbucketPassword = System.getenv("BITBUCKET_PASSWORD")
    }
}

/**
 * Конфигурация параметров, зависящих от текущей ветки
 */
void configureByBranch() {
    def git = new org.eclipse.jgit.api.Git(new org.eclipse.jgit.storage.file.FileRepositoryBuilder()
            .readEnvironment()
            .findGitDir(project.getProjectDir())
            .build())

    def branchName = git.getRepository().getBranch()
    def isMasterBranch = branchName.toLowerCase().equals("master")
    def isDevBranch = branchName.toLowerCase().equals("dev")

    def isReleaseBranch = java.util.regex.Pattern.compile("(release)/.*").matcher(branchName).find()

    if (!(isMasterBranch || isReleaseBranch)) {
        project.getTasks().getByName("build")
                .dependsOn(project.getTasks().getByName("checkChangelog"));
    }

    if (!(isMasterBranch || isDevBranch || isReleaseBranch)) {
        def fullBranchName = java.util.regex.Pattern.compile("[^a-zA-Z0-9\\-\\.]+")
                .matcher(branchName)
                .replaceFirst("-")

        def mainVersion = version.toString()
                .substring(0, version.toString().indexOf("-SNAPSHOT"))
        version = "$mainVersion-$fullBranchName-SNAPSHOT"
    }
}

void configureJar() {
    def jarTask = tasks.getByName("jar") as Jar

    def buildDate = new Date().format("yyyy-MM-dd")
    def hostName = InetAddress.localHost.hostName
    jarTask.manifest {
        attributes(
                ["Implementation-Version": "built at $buildDate on $hostName",
                 "Bundle-SymbolicName"   : name,
                 "Built-By"              : System.getProperty("user.name"),
                 "Built-Date"            : buildDate,
                 "Built-At"              : hostName]
        )
    }

    jarTask.from(projectDir) {
        include("CHANGELOG.md", "README.md")
        into("META-INF")
    }
}

void configurePublish() {
    repositories {
        maven { url 'https://nexus.yamoney.ru/repository/releases/' }
        maven { url 'https://nexus.yamoney.ru/repository/gradle-plugins/' }
        maven { url 'https://nexus.yamoney.ru/repository/snapshots/' }
    }

    project.getExtensions().getByType(GradlePluginDevelopmentExtension.class).setAutomatedPublishing(false)
    javaArtifactPublishSettings {
        nexusUser = System.getenv("NEXUS_USER")
        nexusPassword = System.getenv("NEXUS_PASSWORD")
        groupId = 'ru.yandex.money.gradle.plugins'
        artifactId = 'yamoney-gradle-project-plugin'
    }
}

/**
 * Предназначен для проверки наличия SNAPSHOT зависимостей плагина
 */
task checkSnapshotsDependencies {
    doLast {
        def isAllowSnapshot = project.hasProperty("allowSnapshot") && project.getProperty("allowSnapshot") == "true"
        if (isAllowSnapshot) {
            logger.lifecycle("Snapshot dependencies are allowed. SKIPPED")
            return
        }

        Set snapshotPackages = []

        project.configurations.each { conf ->
            conf.allDependencies.findAll { dep -> !(dep instanceof ProjectDependencyInternal) }
                    .each { dep ->
                        if (dep.version?.toUpperCase()?.endsWith('-SNAPSHOT') ||
                                dep.version?.matches('^.+(\\d{8}\\.\\d{6}\\-\\d+)$')) {
                            snapshotPackages.add("${dep.group}:${dep.name}:${dep.version}")
                        }
                    }
        }

        if (!snapshotPackages.isEmpty()) {
            throw new IllegalStateException("You have the following SNAPSHOT dependencies:\r\n${snapshotPackages}")
        }
    }
}