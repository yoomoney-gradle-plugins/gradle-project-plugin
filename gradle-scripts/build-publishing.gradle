apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'java-gradle-plugin'

javadoc {
    classpath += project.configurations.optional
    options {
        docEncoding = 'UTF-8'
        charSet = 'UTF-8'
        encoding = 'UTF-8'
        failOnError = false
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext {
    pluginId = project.name
    pluginImplementationClass = ''
}

group = 'ru.yandex.money.gradle.plugins'

gradlePlugin {
    testSourceSets sourceSets.slowTest
    plugins {
        mainPlugin {
            id = "$project.ext.pluginId"
            implementationClass = "$project.ext.pluginImplementationClass"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId project.ext.pluginId

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
        }
    }

    repositories {
        maven {
            url project.version.endsWith('-SNAPSHOT') ? project.ext.snapshotRepoProxyUrl : project.ext.releaseRepoProxyUrl
            credentials {
                username System.getenv('NEXUS_USER')
                password System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }


/**
 * Сохраняет версию модуля в файл.
 * Данный файл используется для публикации версии компонента на странице сборки компонента в jenkins
 */
task storeVersion {
    description = "Generates file, which contains information about build version"

    def storeVersionToFile = { String versionDir, String filename, String content ->
        try {
            File versionFile = new File(versionDir, filename)
            versionFile.text = content
            logger.lifecycle("File with version generated successfully into ${versionFile.getAbsolutePath()}")
        } catch (Exception e) {
            logger.lifecycle("Error occurred during storing version: '${e.getMessage()}'. SKIPPED")
        }
    }

    doLast {
        storeVersionToFile(buildDir as String, "version.txt", "$project.ext.pluginId:$version")
    }
}
tasks.publish.finalizedBy storeVersion